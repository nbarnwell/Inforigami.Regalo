using System;
using System.Linq;
using Inforigami.Regalo.Interfaces;
using NUnit.Framework;
using Inforigami.Regalo.Core;
using Inforigami.Regalo.EventSourcing;
using Inforigami.Regalo.RavenDB.Tests.Unit.DomainModel.Customers;
using Inforigami.Regalo.Testing;
using Raven.Client.Documents;
using Raven.Client.Exceptions.Database;
using Conventions = Inforigami.Regalo.Core.Conventions;
using Raven.Client.ServerWide.Operations;
using Raven.Client.ServerWide;
using static System.Formats.Asn1.AsnWriter;

namespace Inforigami.Regalo.RavenDB.Tests.Unit
{
    [TestFixture]
    public class PersistenceTests
    {
        private IDocumentStore _documentStore;

        [OneTimeSetUp]
        public void OneTimeSetup()
        {
            _documentStore = new DocumentStore()
            {
                Urls     = new[] { "http://localhost:8080" },
                Database = "Inforigami.Regalo.RavenDB.Tests.Unit"
            };
            _documentStore.Initialize();

            var record = _documentStore.Maintenance.Server.Send(new GetDatabaseRecordOperation(_documentStore.Database));
            if (record == null)
            {
                _documentStore.Maintenance.Server.Send(new CreateDatabaseOperation(new DatabaseRecord(_documentStore.Database)));
            }
        }

        [SetUp]
        public void SetUp()
        {

            Resolver.Configure(type =>
                               {
                                   if (type == typeof(ILogger)) return new ConsoleLogger();
                                   throw new InvalidOperationException(string.Format("No type of {0} registered.", type));
                               },
                               type => null,
                               o => { });
        }

        [TearDown]
        public void TearDown()
        {
            Conventions.SetFindAggregateTypeForEventType(null);

            Resolver.Reset();
        }

        private IDocumentStore GetDocumentStore()
        {
            return _documentStore;
        }

        [Test]
        public void Loading_GivenEmptyStore_ShouldReturnNull()
        {
            // Arrange
            IEventStore store = new RavenEventStore(GetDocumentStore());

            // Act
            EventStream<Customer> stream = store.Load<Customer>(Guid.NewGuid().ToString());

            // Assert
            CollectionAssert.IsEmpty(stream.Events);
        }

        [Test]
        public void Saving_GivenSingleEvent_ShouldAllowReloading()
        {
            // Arrange
            IEventStore store = new RavenEventStore(GetDocumentStore());

            // Act
            var id = Guid.NewGuid();
            var evt = new CustomerSignedUp(id);
            store.Save<Customer>(id.ToString(), 0, new[] { evt });
            var stream = store.Load<Customer>(id.ToString());

            // Assert
            Assert.NotNull(stream);
            CollectionAssert.AreEqual(
                new object[] { evt },
                stream.Events,
                "Events reloaded from store do not match those generated by aggregate.");
        }

        [Test]
        public void Saving_GivenEventWithGuidProperty_ShouldAllowReloadingToGuidType()
        {
            // Arrange
            IEventStore store = new RavenEventStore(GetDocumentStore());

            var customer = new Customer();
            customer.Signup();

            var accountManager = new AccountManager();
            var startDate = new DateTime(2012, 4, 28);
            accountManager.Employ(startDate);

            customer.AssignAccountManager(accountManager.Id, startDate);

            store.Save<Customer>(customer.Id.ToString(), 0, customer.GetUncommittedEvents());

            // Act
            var acctMgrAssignedEvent = (AssignedAccountManager)store.Load<Customer>(customer.Id.ToString())
                                                                    .Events
                                                                    .LastOrDefault();

            // Assert
            Assert.NotNull(acctMgrAssignedEvent);
            Assert.AreEqual(accountManager.Id, acctMgrAssignedEvent.AccountManagerId);
        }

        [Test]
        public void Saving_GivenEvents_ShouldAllowReloading()
        {
            // Arrange
            IEventStore store = new RavenEventStore(GetDocumentStore());

            // Act
            var customer = new Customer();
            customer.Signup();
            store.Save<Customer>(customer.Id.ToString(), 0, customer.GetUncommittedEvents());
            var stream = store.Load<Customer>(customer.Id.ToString());

            // Assert
            Assert.NotNull(stream);
            CollectionAssert.AreEqual(customer.GetUncommittedEvents(), stream.Events, "Events reloaded from store do not match those generated by aggregate.");
        }


        [Test]
        public void Saving_GivenNoEvents_ShouldDoNothing()
        {
            // Arrange
            IEventStore store = new RavenEventStore(GetDocumentStore());

            // Act
            var id = Guid.NewGuid();
            store.Save<Customer>(id.ToString(), 0, Enumerable.Empty<IEvent>());
            var stream = store.Load<Customer>(id.ToString());

            // Assert
            CollectionAssert.IsEmpty(stream.Events);
        }

        [Test]
        public void GivenAggregateWithMultipleEvents_WhenLoadingSpecificVersion_ThenShouldOnlyReturnRequestedEvents()
        {
            // Arrange
            IEventStore store = new RavenEventStore(GetDocumentStore());
            var customerId = Guid.NewGuid();
            var storedEvents = new EventChain().Add(new CustomerSignedUp(customerId))
                                               .Add(new SubscribedToNewsletter("latest"))
                                               .Add(new SubscribedToNewsletter("top"));
            store.Save<Customer>(customerId.ToString(), 0, storedEvents);
           
            // Act
            var stream = store.Load<Customer>(customerId.ToString(), storedEvents[1].Version);

            // Assert
            CollectionAssert.AreEqual(storedEvents.Take(2), stream.Events, "Events loaded from store do not match version requested.");
        }

        [Test]
        public void GivenAggregateWithMultipleEvents_WhenLoadingSpecificVersionThatNoEventHas_ThenShouldFail()
        {
            // Arrange
            IEventStore store = new RavenEventStore(GetDocumentStore());
            var customerId = Guid.NewGuid();
            var storedEvents = new IEvent[]
                              {
                                  new CustomerSignedUp(customerId), 
                                  new SubscribedToNewsletter("latest"), 
                                  new SubscribedToNewsletter("top")
                              };
            store.Save<Customer>(customerId.ToString(), 0, storedEvents);

            // Act / Assert
            Assert.Throws<ArgumentOutOfRangeException>(() => store.Load<Customer>(customerId.ToString(), 4));
        }

        [Test]
        public void Saving_GivenEventMappedToAggregateType_ThenShouldSetRavenCollectionName()
        {
            var customerId    = Guid.NewGuid();
            var documentStore = GetDocumentStore();
            using (var eventStore = new RavenEventStore(documentStore))
            {
                Conventions.SetFindAggregateTypeForEventType(
                    type =>
                    {
                        if (type == typeof(CustomerSignedUp))
                        {
                            return typeof(Customer);
                        }

                        return typeof(EventStream);
                    });

                var storedEvents = new IEvent[]
                {
                    new CustomerSignedUp(customerId),
                    new SubscribedToNewsletter("latest"),
                    new SubscribedToNewsletter("top")
                };

                eventStore.Save<Customer>(customerId.ToString(), 0, storedEvents);
                eventStore.Flush();
            }

            using (var session = documentStore.OpenSession())
            {
                var eventStream        = session.Load<EventStream>(customerId.ToString());
                var metadataDictionary = session.Advanced.GetMetadataFor(eventStream);
                var entityName         = metadataDictionary["@collection"].ToString();

                Assert.That(entityName, Is.EqualTo("Customers"));
            }
        }

        [Test]
        public void Disposing_a_delayedwriteeventstore_with_pending_changes_should_throw_exception()
        {
            Assert.Throws<InvalidOperationException>(
                () =>
                {
                    using (var eventStore = new RavenEventStore(GetDocumentStore()))
                    {
                        var customerId = Guid.NewGuid();

                        var storedEvents = new EventChain
                                           {
                                               new CustomerSignedUp(customerId),
                                               new SubscribedToNewsletter("latest"),
                                               new SubscribedToNewsletter("top")
                                           };

                        eventStore.Save<Customer>(customerId.ToString(), 0, storedEvents);
                    }
                });
        }
    }
}
